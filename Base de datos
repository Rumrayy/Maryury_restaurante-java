CREATE TABLE clientes (
    cliente_id SERIAL PRIMARY KEY,
    nombres VARCHAR(50) NOT NULL,
    apellidos VARCHAR(50) NOT NULL,
    correo VARCHAR(250) UNIQUE NOT NULL,
    numero_telefono VARCHAR(50) UNIQUE NOT NULL,
    contraseña VARCHAR(250) NOT NULL
);

CREATE TABLE menu (
    plato_id INT PRIMARY KEY,
    nombre_plato VARCHAR(100) NOT NULL,
    descripción VARCHAR(250) NOT NULL,
    precio DECIMAL(10, 2) NOT NULL,
    categoria_id INT,
    FOREIGN KEY (categoria_id) REFERENCES categoria(categoria_id)
);

CREATE TABLE categoria (
    categoria_id INT PRIMARY KEY,
    nombre_categoria VARCHAR(50) NOT NULL
);

CREATE TABLE reservaciones (
    reservacion_id INT PRIMARY KEY,
    cliente_id INT NOT NULL,
    fecha_reserva DATE NOT NULL,
    hora_reserva TIME NOT NULL,
    mesa_id INT NOT NULL,
    pago_token VARCHAR(255), -- Token proporcionado por la API de pagos
    transaccion_id VARCHAR(255), -- ID de transacción de la API de pagos
    estado_pago VARCHAR(50), -- Estado del pago (ejemplo: 'preautorizado', 'completado', 'fallido')
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id),
    FOREIGN KEY (mesa_id) REFERENCES mesas(mesa_id)
);
CREATE TABLE mesas (
    mesa_id INT PRIMARY KEY,
    nombre_mesa VARCHAR(50) NOT NULL,
    capacidad INT NOT NULL
);

CREATE TABLE Pagos (
    PagoID INT PRIMARY KEY,
    ClienteID INT,
    Monto DECIMAL(10, 2),
    FechaPago DATE,
    FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID)
);

CREATE TABLE Facturas (
    FacturaID INT PRIMARY KEY,
    ReservaciónID INT,
    PedidoID INT,
    FechaEmisión DATE,
    Total DECIMAL(10, 2),
    FOREIGN KEY (ReservaciónID) REFERENCES Reservaciones(ReservaciónID),
    FOREIGN KEY (PedidoID) REFERENCES Pedidos(PedidoID)
);

CREATE TABLE Pedidos (
    PedidoID INT PRIMARY KEY,
    ClienteID INT,
    PlatoID INT,
    Cantidad INT,
    FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID),
    FOREIGN KEY (PlatoID) REFERENCES Menu(PlatoID)
);
